diff --git a/source/derived/mus_source_var_turbChanForce_module.f90 b/source/derived/mus_source_var_turbChanForce_module.f90
index 8dbc754..cda837e 100644
--- a/source/derived/mus_source_var_turbChanForce_module.f90
+++ b/source/derived/mus_source_var_turbChanForce_module.f90
@@ -75,13 +75,14 @@ module mus_source_var_turbChanForce_module
       integer :: iElem, nElemsGlobal_uTau, posInTotal, elemOff
       type(mus_varSys_data_type), pointer :: fPtr
       integer :: iErr, iBC, iLvlLoc
-      real(kind=rk) :: vel_bulk, vel_tau
+      real(kind=rk) :: vel_bulk(3), vel_tau, vel_sw
       real(kind=rk) :: avgVelBulk, avgVelTau
       ! index 1 for vel_tau and 2 for vel_bulk to get global avg with one mpi call
       real(kind=rk) :: avgVel(2), avgVelGlobal(2)
       real(kind=rk) :: forceDyn, gradU(3,3,1)
       logical :: velTauFromBnd
       ! --------------------------------------------------------------------------
+      write(*,*) "Entering mus_updateSrcVar_turbChanForce"
 
       ! position of velocity field in auxField
       vel_pos = varSys%method%val(derVarPos(1)%velocity)%auxField_varPos(1:3)
@@ -129,6 +130,7 @@ module mus_source_var_turbChanForce_module
               end if
             end select
           end do
+          write(*,*) "vel_tau: ", vel_tau
 
           !> If wall model BC is not used than compute the friction velocity from
           !! the single sided finite difference's and perform the spatial averaging.
@@ -201,47 +203,63 @@ module mus_source_var_turbChanForce_module
 
           !> Bulk mean velocity part of forcing is independent whether a wall
           ! modelBC is used or not
-          select case(fun%turbChanForce%flow_direction)
-          case (1) ! x-direction
-            do iElem = 1, fun%turbChanForce%subTree_umean%nElems
-              ! map2Global refers to position in treeid list
-              ! levelPointer refers to position in level wise total list
-              posInTotal = levelPointer( map2Global_umean(iElem) )
-              ! elemoffset for auxField
-              elemoff = (posInTotal-1)*varSys%nAuxScalars
-              ! velocity X in defined shape to compute average
-              iLvlLoc = tem_levelOf( tree%treeID( map2Global_umean(iElem) ) )
-              vel_bulk = vel_bulk + auxFieldTot(iLvlLoc)%val(elemOff+vel_pos(1)) &
-                &                 * physics%fac(iLvlLoc)%vel
-            end do
-          case (2) ! y-direction
-            do iElem = 1, fun%turbChanForce%subTree_umean%nElems
-              ! map2Global refers to position in treeid list
-              ! levelPointer refers to position in level wise total list
-              posInTotal = levelPointer( map2Global_umean(iElem) )
-              ! elemoffset for auxField
-              elemoff = (posInTotal-1)*varSys%nAuxScalars
-              ! velocity X in defined shape to compute average
-              iLvlLoc = tem_levelOf( tree%treeID( map2Global_umean(iElem) ) )
-              vel_bulk = vel_bulk + auxFieldTot(iLvlLoc)%val(elemOff+vel_pos(2)) &
-                &                 * physics%fac(iLvlLoc)%vel
-            end do
-            case (3) ! z-direction
-            do iElem = 1, fun%turbChanForce%subTree_umean%nElems
-              ! map2Global refers to position in treeid list
-              ! levelPointer refers to position in level wise total list
-              posInTotal = levelPointer( map2Global_umean(iElem) )
-              ! elemoffset for auxField
-              elemoff = (posInTotal-1)*varSys%nAuxScalars
-              ! velocity X in defined shape to compute average
-              iLvlLoc = tem_levelOf( tree%treeID( map2Global_umean(iElem) ) )
-              vel_bulk = vel_bulk + auxFieldTot(iLvlLoc)%val(elemOff+vel_pos(3)) &
-                &                 * physics%fac(iLvlLoc)%vel
-            end do
-          end select
+          !select case(fun%turbChanForce%flow_direction)
+          !case (1) ! x-direction
+          !  do iElem = 1, fun%turbChanForce%subTree_umean%nElems
+          !    ! map2Global refers to position in treeid list
+          !    ! levelPointer refers to position in level wise total list
+          !    posInTotal = levelPointer( map2Global_umean(iElem) )
+          !    ! elemoffset for auxField
+          !    elemoff = (posInTotal-1)*varSys%nAuxScalars
+          !    ! velocity X in defined shape to compute average
+          !    iLvlLoc = tem_levelOf( tree%treeID( map2Global_umean(iElem) ) )
+          !    vel_bulk = vel_bulk + auxFieldTot(iLvlLoc)%val(elemOff+vel_pos(1)) &
+          !      &                 * physics%fac(iLvlLoc)%vel
+          !  end do
+          !case (2) ! y-direction
+          !  do iElem = 1, fun%turbChanForce%subTree_umean%nElems
+          !    ! map2Global refers to position in treeid list
+          !    ! levelPointer refers to position in level wise total list
+          !    posInTotal = levelPointer( map2Global_umean(iElem) )
+          !    ! elemoffset for auxField
+          !    elemoff = (posInTotal-1)*varSys%nAuxScalars
+          !    ! velocity X in defined shape to compute average
+          !    iLvlLoc = tem_levelOf( tree%treeID( map2Global_umean(iElem) ) )
+          !    vel_bulk = vel_bulk + auxFieldTot(iLvlLoc)%val(elemOff+vel_pos(2)) &
+          !      &                 * physics%fac(iLvlLoc)%vel
+          !  end do
+          !case (3) ! z-direction
+          !  do iElem = 1, fun%turbChanForce%subTree_umean%nElems
+          !    ! map2Global refers to position in treeid list
+          !    ! levelPointer refers to position in level wise total list
+          !    posInTotal = levelPointer( map2Global_umean(iElem) )
+          !    ! elemoffset for auxField
+          !    elemoff = (posInTotal-1)*varSys%nAuxScalars
+          !    ! velocity X in defined shape to compute average
+          !    iLvlLoc = tem_levelOf( tree%treeID( map2Global_umean(iElem) ) )
+          !    vel_bulk = vel_bulk + auxFieldTot(iLvlLoc)%val(elemOff+vel_pos(3)) &
+          !      &                 * physics%fac(iLvlLoc)%vel
+          !  end do
+          !end select
+          do iElem = 1, fun%turbChanForce%subTree_umean%nElems
+            ! map2Global refers to position in treeid list
+            ! levelPointer refers to position in level wise total list
+            posInTotal = levelPointer( map2Global_umean(iElem) )
+            ! elemoffset for auxField
+            elemoff = (posInTotal-1)*varSys%nAuxScalars
+            ! velocity X in defined shape to compute average
+            iLvlLoc = tem_levelOf( tree%treeID( map2Global_umean(iElem) ) )
+            vel_bulk(1) = vel_bulk(1) + auxFieldTot(iLvlLoc)%val(elemOff+vel_pos(1)) &
+              &         * physics%fac(iLvlLoc)%vel
+            vel_bulk(2) = vel_bulk(2) + auxFieldTot(iLvlLoc)%val(elemOff+vel_pos(2)) &
+              &         * physics%fac(iLvlLoc)%vel
+            vel_bulk(3) = vel_bulk(3) + auxFieldTot(iLvlLoc)%val(elemOff+vel_pos(3)) &
+              &         * physics%fac(iLvlLoc)%vel
+          end do
+          vel_sw = dot_product(vel_bulk, fun%turbChanForce%unit_stream_wise)
 
           avgVel(1) = vel_tau
-          avgVel(2) = vel_bulk
+          avgVel(2) = vel_sw
           ! Calculate total friction and bulk velocity
           call mpi_allreduce( avgVel, avgVelGlobal,                      &
             &                 2, rk_mpi, mpi_sum, tree%global%comm, iErr )
@@ -263,14 +281,15 @@ module mus_source_var_turbChanForce_module
           !flush(dbgunit(1))
           !write(dbgunit(1), *) 'forceDyn_phy: ', forceDyn
 
-          select case(fun%turbChanForce%flow_direction)
-          case(1) ! x-direction
-            fun%turbChanForce%forceDyn(1) = forceDyn
-          case(2) ! y-direction
-            fun%turbChanForce%forceDyn(2) = forceDyn
-          case(3) ! z-direction
-            fun%turbChanForce%forceDyn(3) = forceDyn
-          end select
+          !select case(fun%turbChanForce%flow_direction)
+          !case(1) ! x-direction
+          !  fun%turbChanForce%forceDyn(1) = forceDyn
+          !case(2) ! y-direction
+          !  fun%turbChanForce%forceDyn(2) = forceDyn
+          !case(3) ! z-direction
+          !  fun%turbChanForce%forceDyn(3) = forceDyn
+          !end select
+          fun%turbChanForce%forceDyn = forceDyn * fun%turbChanForce%unit_wall_normal
         end if
       end associate
 
diff --git a/source/mus_source_type_module.f90 b/source/mus_source_type_module.f90
index d46a2d3..6095a05 100644
--- a/source/mus_source_type_module.f90
+++ b/source/mus_source_type_module.f90
@@ -112,6 +112,12 @@ module mus_source_type_module
     !! x=1, y=2, z=3
     integer :: flow_direction
 
+    !> Wall normal unit vector
+    real(kind=rk) :: unit_wall_normal(3)
+
+    !> Stream-wise unit vector
+    real(kind=rk) :: unit_stream_wise(3)
+
     !> Dynamic Force term for turbulent channel in physical unit [m/s^2]
     !! F_dyn = (refVelBulk-avgVelXBulk) * refVelBulk / refHeight
     real(kind=rk) :: forceDyn(3)
@@ -543,9 +549,11 @@ contains
     integer, intent(in) :: parent
     ! -------------------------------------------------------------------------!
     integer :: turbForce_handle, iError
+    integer :: vError(3), errfatal(3)
     character(len=1) :: flow_direction
     ! -------------------------------------------------------------------------!
     ! -------------------------------------------------------------------------!
+    errfatal = aotErr_Fatal
 
     call aot_table_open( L       = conf,             &
       &                  parent  = parent,           &
@@ -597,6 +605,28 @@ contains
       call tem_abort('Unknown flow_direction')
     end select
 
+    call aot_get_val( L       = conf,                &
+      &               thandle = turbForce_handle,    &
+      &               key     = 'unit_wall_normal',  &
+      &               val     = me%unit_wall_normal, &
+      &               ErrCode = vError               )
+    if( any( btest( vError, errFatal ))) then
+      write(logUnit(1), *) 'Error loading unit_wall_normal!'
+      call tem_abort()
+    end if
+
+    call aot_get_val( L       = conf,                &
+      &               thandle = turbForce_handle,    &
+      &               key     = 'unit_stream_wise',  &
+      &               val     = me%unit_stream_wise, &
+      &               ErrCode = vError               )
+    if( any( btest( vError, errFatal ))) then
+      write(logUnit(1), *) 'Error loading unit_stream_wise!'
+      call tem_abort()
+    end if
+
+
+
     ! load geometry
     call tem_load_shape( conf    = conf,             &
       &                  parent  = turbForce_handle, &
